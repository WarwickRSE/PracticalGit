
MODULE searches

IMPLICIT NONE
CONTAINS

FUNCTION simple_binary_search(target_num, numbers)
!Searches for target in ordered list numbers
!Return is negative if not found

  INTEGER(KIND=16) :: simple_binary_search
  INTEGER(KIND=16), INTENT(IN) :: target_num
  INTEGER(KIND=16) :: i, stride, sz, indx, lower, upper
  INTEGER(KIND=16), DIMENSION(:), INTENT(IN):: numbers
  
  simple_binary_search = -1000
  sz = SIZE(numbers)
  stride = sz/2
  indx=sz/2
  lower = 1
  upper=sz+1

  DO i=1, sz
  !Sz is max number possible iterations
    IF(numbers(indx) .GT. target_num) THEN 
      upper = upper - stride
      indx = (lower+upper)/2
      stride =(upper-lower)/2
    ELSE IF(numbers(indx) .LT. target_num) THEN
      lower = lower+stride
      indx =(lower+upper)/2
      stride = (upper-lower)/2
    ELSE IF(numbers(indx)== target_num) THEN
      PRINT*, 'FOUND!!'
      simple_binary_search = indx
      stride=0
    ENDIF
    IF(stride .LT. 1) RETURN
  ENDDO

  RETURN
END

END MODULE searches


PROGRAM EULER_CONJECTURE

USE searches

IMPLICIT NONE

INTEGER(KIND=16):: expn=0, maximum=0, i, j, k, l, m, found=0
INTEGER(KIND=16):: int_1, int_2, int_3, int_4, total, indx
INTEGER(KIND=16), DIMENSION(:), ALLOCATABLE:: numbers
INTEGER:: a
REAL(KIND=8):: tolerance
REAL(KIND=8):: one_over_exp
REAL(KIND=8):: root, tmp_root

maximum=200
expn=5
tolerance = 2e-5
one_over_exp = 1.0/REAL(expn, 8)

tmp_root = REAL(maximum, 8)**expn
PRINT*, tmp_root, tmp_root**one_over_exp, HUGE(tmp_root), HUGE(int_1)

IF(HUGE(int_1) .LE. tmp_root) THEN

  PRINT*, 'Warning, insufficient integer size' 
  STOP
ENDIF

ALLOCATE(numbers(maximum))

DO indx=1, maximum 
  numbers(indx) = indx**expn
ENDDO

DO i=1, maximum
  PRINT*, i
  int_1 = numbers(i)

  DO j=i, maximum
    int_2 = numbers(j)

    DO k=j, maximum
      int_3 = numbers(k)

      DO l=k, maximum
        total = int_1+int_2+int_3 + numbers(l)
        !linear search in numbers for this value, going from l on up
        DO m = l, maximum
          IF(total == numbers(m)) THEN
            found = m
            CONTINUE
          ENDIF
        ENDDO
        !found = simple_binary_search(total, numbers)
        IF(found .GT. 0) THEN
          PRINT*, i, j, k, l
          PRINT*, int_1, int_2, int_3, numbers(l)
          PRINT*, total, ' : ', found
          STOP
        ENDIF
      ENDDO
    ENDDO
  ENDDO
ENDDO

END PROGRAM


